buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8



repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	runtime('org.postgresql:postgresql')
	compile group: 'com.h2database', name: 'h2', version: '1.4.196'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "ngBuild"
}



task addDependency(type: YarnTask) {
	// add the express package only
	args = ['add', '@angular/cli'
			, '@angular/material', '@angular/cdk'
			, '@angular/animations',
			'hammerjs']
}


task ngServe(type: YarnTask) {
	args = ['start-dev']
}

task ngBuild(type: YarnTask) {
	args = ['build']
}

//task buildAngular(type:Exec) {
//	// installAngular should be run prior to this task
//
//	workingDir "$webappDir"
//	inputs.dir "$webappDir"
//	// Add task to the standard build group
//	group = BasePlugin.BUILD_GROUP
//	// ng doesn't exist as a file in windows -> ng.cmd
//	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
//		commandLine "ng.cmd", "build"
//	} else {
//		commandLine "ng", "build"
//	}
//}

node {
	// Version of node to use.
	version = '8.10.0'

	// Version of npm to use.
	npmVersion = '5.7.1'

	// Version of Yarn to use.
	yarnVersion = '1.3.2'

	// Base URL for fetching node distributions (change if you have a mirror).
	distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")

	// Set the work directory for Yarn
	yarnWorkDir = file("${project.buildDir}/yarn")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/src/main/webapp")
}


